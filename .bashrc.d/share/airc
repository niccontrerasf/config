# aichat https://github.com/sigoden/aichat
aichat_prompt='Make your your answers are brief but clear unless stated otherwise. Depends on context you can use bullet points for short actionable steps or just brief description direct to the point.'
alias a='aichat --prompt "${aichat_prompt}"'
alias aa='aichat -s --prompt "${aichat_prompt}"'
alias ac='aichat -c'
alias as='aichat -r %shell%'

gitme(){
	git diff 1>/dev/null 2>/dev/null ||
	{ color "No diff found"; return 2; } &&
	aichat --file '`git diff`' "generate git commit message"
}

yt(){
	local url
	unset yt_vid_id
	[[ -z "${1}" ]] && { color "No params, input url or video id" >&2; return 2; }
	if [[ "${1}" =~ ^https://[a-zA-Z0-9.-]+(\.[a-zA-Z]{2,})+(/.*)?$ ]]
	then
		url="${1}"
		yt_vid_id="$(echo "$url" | sed 's/.*v=\([^&]*\).*/\1/')"
	elif [[ "${#1}" -eq 11 ]]
	then
		url='https://www.youtube.com/watch?v='"${1}"
		yt_vid_id="${1}"
	else
		color "${1} , seems like is not a id or url" >&2
		return 2
	fi

	local wfolder='/tmp/yt'
	local fname="${wfolder}/${yt_vid_id}"

	if ! [[ -f "${fname}" && -s "${fname}" && -z "${r}" ]]
	then
		rm -rf /tmp/yt
		mkdir -p ${wfolder}

		[[ -n "${TS}" ]] &&
		echo "
		# INSTRUCTIONS
		The following INPUT is a video transcript, and the FORMAT provided contains for each line the TIMESTAMP in brackets followed by the SENTENCE that was said at that TIMESTAMP. Be prepare to analyse and respond only based on the SENTENCES unles the TIMESTAMP is requested explicitely. The answers must be in order or appearance.

		# INPUT
		" > "${fname}"

		local lec
		local retries="${retries:-3}"

		for ret in $(seq 1 ${retries})
		do
			vcmd fabric -y "${url}" --transcript ${TS:+"--transcript-with-timestamps"} >> "${fname}"
			lec="${?}"

			[[ "${lec}" -eq 0 ]] && break
		done
		[[ "${lec}" -ne 0 ]] && { rm "${fname}" 1>/dev/null 2>&1; return "${lec}"; }
	fi

	# fd = 0 stdin; and called just by itself
	[[ -t 0 && "${#FUNCNAME[@]}" -eq 1 ]] && cat "${fname}" || echo "${fname}"
}

atalk(){
	! [[ -f "${1}" && -s "${1}" || -d "${1}" ]] && return 1

	local wfolder='/tmp/rag'
	eval rm -rvf "/tmp/rag/*"
	mkdir -p '/tmp/rag'

	ln -s $(readlink -f "${1}") ${wfolder}/ &&
	aichat --empty-session -s tmp --rag tmp --rebuild-rag &&
	aichat --empty-session -s tmp --rag tmp
}

# download yt transcript and start rag session aichat
ytalk(){
	# $1 youtube id
	
	local fname
	fname="$(yt "${1}")" || return 10

	[[ -f "${fname}" && -s "${fname}" ]] && {

		# run aichat with rag and try lo relog files, as it used old rag
		tput setaf 1;echo .rebuild rag;tput sgr0

		# tmux alternative # commented
		[[ -n "${TMUX}" ]] &&
		{
			# -t pop:0.1
			local ptarget=$(tmux display-message -p "#S:#I.#P")
		# force rebuild rag from files when using tmux
		#	(sleep 2; tmux send-keys -t ${ptarget} ".rebuild rag" C-m) >/dev/null 2>&1 &
		}

		aichat --empty-session -s yt --rag yt --rebuild-rag
		aichat --empty-session -s yt --rag yt
	}
}

# fabric https://github.com/danielmiessler/fabric
summ(){
	local fname
	fname="$(yt "${1}")" && cat < "${fname}" | fabric -s -p "${2:-"summarize"}"
}

ytsum() {
	summ "${1}" "yt_takeaways"
}

sum10(){
	local fname
	fname="$(yt "${1}")" && cat < "${fname}" | fabric "Summarize in ${2:-10} words"
}
